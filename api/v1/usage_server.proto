syntax = "proto3";

package llmariner.apiusage.server.v1;

import "google/api/annotations.proto";
import "google/api/http.proto";

option go_package = "github.com/llmariner/api-usage/api/v1";

message RequestFilter {
  // start_timestamp specifies the start time of the snapshot histories (inclusive). Unix timestamp in seconds.
  int64 start_timestamp = 1;
  // end_timestamp specifies the end time of the snapshot histories (exclusive). Unix timestamp in seconds.
  int64 end_timestamp = 2;
}

message GetAggregatedSummaryRequest {
  string tenant_id = 1;

  // star_time is the UNIX timestamp for the summary start time (inclusive).
  // If start_time is not provided, the default is the 24 hours before end_time.
  int64 start_time = 2;
  // end_time is the UNIX timestamp for the summary end time (exclusive).
  // If end_time is not provided, the default is the current time.
  int64 end_time = 3;
}

message Summary {
  string method = 1;
  int64 total_requests = 2;
  int64 success_requests = 3;
  int64 failure_requests = 4;
  double average_latency = 5;
}

message AggregatedSummary {
  Summary summary = 1;
  repeated Summary method_summaries = 2;
}

message GetUsageDataRequest {
  // start_time is the UNIX timestamp for the data start time (inclusive).
  // If start_time is not provided, the default is the 24 hours before end_time.
  int64 start_time = 1;
  // end_time is the UNIX timestamp for the data end time (exclusive).
  // If end_time is not provided, the default is the current time.
  int64 end_time = 2;

  Filter filter = 3;

  // after is the identifier for the last datum from the previous pagination request.
  string after = 4;
  // limit is the number of entries to retrieve.
  int32 limit = 5;

  message Filter {
    repeated string api_keys = 1;
    repeated string models = 2;
  }
}

message UsageData {
  repeated UsageDataPoint data_points = 1;
}

message UsageDataPoint {
  string user_id = 1;
  string organization = 2;
  string project = 3;

  string api_key_id = 4;

  string api_method = 5;
  int32 status_code = 6;
  int64 timestamp = 7;
  int32 latency_ms = 8;

  string model_id = 9;
  int32 time_to_first_token_ms = 10;
  int32 prompt_tokens = 11;
  int32 completion_tokens = 12;
}

message ListUsageDataRequest {
  // start_time is the UNIX timestamp for the data start time (inclusive).
  // If start_time is not provided, the default is the 24 hours before end_time.
  int64 start_time = 1;
  // end_time is the UNIX timestamp for the data end time (exclusive).
  // If end_time is not provided, the default is the current time.
  int64 end_time = 2;
}

message UsageDataByGroup {
  string user_id = 1;
  string api_key_id = 2;
  string api_key_name = 9;
  string model_id = 3;

  int64 total_requests = 4;
  double avg_latency_ms = 5;
  double avg_time_to_first_token_ms = 6;
  int64 total_prompt_tokens = 7;
  int64 total_completion_tokens = 8;
}

message ListUsageDataResponse {
  repeated UsageDataByGroup usages = 1;
}

message ListModelUsageSummariesRequest {
  RequestFilter filter = 1;
}

message ListModelUsageSummariesResponse {
  message Value {
    string model_id = 1;

    int64 total_requests = 2;
    int64 total_prompt_tokens = 3;
    int64 total_completion_tokens = 4;
  }

  message Datapoint {
    // timestamp is the Unix timestamp in seconds.
    int64 timestamp = 1;
    repeated Value values = 2;
  }

  repeated Datapoint datapoints = 1;
}

service APIUsageService {
  rpc GetAggregatedSummary(GetAggregatedSummaryRequest) returns (AggregatedSummary);
  rpc GetUsageData(GetUsageDataRequest) returns (UsageData);

  rpc ListUsageData(ListUsageDataRequest) returns (ListUsageDataResponse) {
    option (google.api.http) = {
      get: "/v1/api_usages"
    };
  }

  rpc ListModelUsageSummaries(ListModelUsageSummariesRequest) returns (ListModelUsageSummariesResponse) {
    option (google.api.http) = {
      get: "/v1/api-usage/model-usage-summaries"
    };
  }
}
