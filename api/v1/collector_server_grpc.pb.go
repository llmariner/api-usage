// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/collector_server.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	APIUsageCollector_SendAPIUsage_FullMethodName = "/llmariner.apiusage.server.v1.APIUsageCollector/SendAPIUsage"
)

// APIUsageCollectorClient is the client API for APIUsageCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIUsageCollectorClient interface {
	SendAPIUsage(ctx context.Context, in *APIUsage, opts ...grpc.CallOption) (*SendAPIUsageResponse, error)
}

type aPIUsageCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIUsageCollectorClient(cc grpc.ClientConnInterface) APIUsageCollectorClient {
	return &aPIUsageCollectorClient{cc}
}

func (c *aPIUsageCollectorClient) SendAPIUsage(ctx context.Context, in *APIUsage, opts ...grpc.CallOption) (*SendAPIUsageResponse, error) {
	out := new(SendAPIUsageResponse)
	err := c.cc.Invoke(ctx, APIUsageCollector_SendAPIUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIUsageCollectorServer is the server API for APIUsageCollector service.
// All implementations must embed UnimplementedAPIUsageCollectorServer
// for forward compatibility
type APIUsageCollectorServer interface {
	SendAPIUsage(context.Context, *APIUsage) (*SendAPIUsageResponse, error)
	mustEmbedUnimplementedAPIUsageCollectorServer()
}

// UnimplementedAPIUsageCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedAPIUsageCollectorServer struct {
}

func (UnimplementedAPIUsageCollectorServer) SendAPIUsage(context.Context, *APIUsage) (*SendAPIUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAPIUsage not implemented")
}
func (UnimplementedAPIUsageCollectorServer) mustEmbedUnimplementedAPIUsageCollectorServer() {}

// UnsafeAPIUsageCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIUsageCollectorServer will
// result in compilation errors.
type UnsafeAPIUsageCollectorServer interface {
	mustEmbedUnimplementedAPIUsageCollectorServer()
}

func RegisterAPIUsageCollectorServer(s grpc.ServiceRegistrar, srv APIUsageCollectorServer) {
	s.RegisterService(&APIUsageCollector_ServiceDesc, srv)
}

func _APIUsageCollector_SendAPIUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIUsage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIUsageCollectorServer).SendAPIUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIUsageCollector_SendAPIUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIUsageCollectorServer).SendAPIUsage(ctx, req.(*APIUsage))
	}
	return interceptor(ctx, in, info, handler)
}

// APIUsageCollector_ServiceDesc is the grpc.ServiceDesc for APIUsageCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIUsageCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llmariner.apiusage.server.v1.APIUsageCollector",
	HandlerType: (*APIUsageCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAPIUsage",
			Handler:    _APIUsageCollector_SendAPIUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/collector_server.proto",
}
