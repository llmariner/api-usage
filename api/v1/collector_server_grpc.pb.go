// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/collector_server.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CollectonService_CollectUsage_FullMethodName = "/llmariner.apiusage.server.v1.CollectonService/CollectUsage"
)

// CollectonServiceClient is the client API for CollectonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectonServiceClient interface {
	CollectUsage(ctx context.Context, in *CollectUsageRequest, opts ...grpc.CallOption) (*CollectUsageResponse, error)
}

type collectonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectonServiceClient(cc grpc.ClientConnInterface) CollectonServiceClient {
	return &collectonServiceClient{cc}
}

func (c *collectonServiceClient) CollectUsage(ctx context.Context, in *CollectUsageRequest, opts ...grpc.CallOption) (*CollectUsageResponse, error) {
	out := new(CollectUsageResponse)
	err := c.cc.Invoke(ctx, CollectonService_CollectUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectonServiceServer is the server API for CollectonService service.
// All implementations must embed UnimplementedCollectonServiceServer
// for forward compatibility
type CollectonServiceServer interface {
	CollectUsage(context.Context, *CollectUsageRequest) (*CollectUsageResponse, error)
	mustEmbedUnimplementedCollectonServiceServer()
}

// UnimplementedCollectonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollectonServiceServer struct {
}

func (UnimplementedCollectonServiceServer) CollectUsage(context.Context, *CollectUsageRequest) (*CollectUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectUsage not implemented")
}
func (UnimplementedCollectonServiceServer) mustEmbedUnimplementedCollectonServiceServer() {}

// UnsafeCollectonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectonServiceServer will
// result in compilation errors.
type UnsafeCollectonServiceServer interface {
	mustEmbedUnimplementedCollectonServiceServer()
}

func RegisterCollectonServiceServer(s grpc.ServiceRegistrar, srv CollectonServiceServer) {
	s.RegisterService(&CollectonService_ServiceDesc, srv)
}

func _CollectonService_CollectUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectonServiceServer).CollectUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectonService_CollectUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectonServiceServer).CollectUsage(ctx, req.(*CollectUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectonService_ServiceDesc is the grpc.ServiceDesc for CollectonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llmariner.apiusage.server.v1.CollectonService",
	HandlerType: (*CollectonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectUsage",
			Handler:    _CollectonService_CollectUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/collector_server.proto",
}
