// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIUsageServiceClient is the client API for APIUsageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIUsageServiceClient interface {
	GetAggregatedSummary(ctx context.Context, in *GetAggregatedSummaryRequest, opts ...grpc.CallOption) (*AggregatedSummary, error)
}

type aPIUsageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIUsageServiceClient(cc grpc.ClientConnInterface) APIUsageServiceClient {
	return &aPIUsageServiceClient{cc}
}

func (c *aPIUsageServiceClient) GetAggregatedSummary(ctx context.Context, in *GetAggregatedSummaryRequest, opts ...grpc.CallOption) (*AggregatedSummary, error) {
	out := new(AggregatedSummary)
	err := c.cc.Invoke(ctx, "/llmariner.apiusage.server.v1.APIUsageService/GetAggregatedSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIUsageServiceServer is the server API for APIUsageService service.
// All implementations must embed UnimplementedAPIUsageServiceServer
// for forward compatibility
type APIUsageServiceServer interface {
	GetAggregatedSummary(context.Context, *GetAggregatedSummaryRequest) (*AggregatedSummary, error)
	mustEmbedUnimplementedAPIUsageServiceServer()
}

// UnimplementedAPIUsageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPIUsageServiceServer struct {
}

func (UnimplementedAPIUsageServiceServer) GetAggregatedSummary(context.Context, *GetAggregatedSummaryRequest) (*AggregatedSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregatedSummary not implemented")
}
func (UnimplementedAPIUsageServiceServer) mustEmbedUnimplementedAPIUsageServiceServer() {}

// UnsafeAPIUsageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIUsageServiceServer will
// result in compilation errors.
type UnsafeAPIUsageServiceServer interface {
	mustEmbedUnimplementedAPIUsageServiceServer()
}

func RegisterAPIUsageServiceServer(s grpc.ServiceRegistrar, srv APIUsageServiceServer) {
	s.RegisterService(&APIUsageService_ServiceDesc, srv)
}

func _APIUsageService_GetAggregatedSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregatedSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIUsageServiceServer).GetAggregatedSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/llmariner.apiusage.server.v1.APIUsageService/GetAggregatedSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIUsageServiceServer).GetAggregatedSummary(ctx, req.(*GetAggregatedSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIUsageService_ServiceDesc is the grpc.ServiceDesc for APIUsageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIUsageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llmariner.apiusage.server.v1.APIUsageService",
	HandlerType: (*APIUsageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAggregatedSummary",
			Handler:    _APIUsageService_GetAggregatedSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/usage_server.proto",
}
